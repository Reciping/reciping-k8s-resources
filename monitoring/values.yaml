grafana:
  ingress:
    enabled: true
    ingressClassName: alb
    hosts:
      - grafana.reciping.kr
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:892117097999:certificate/c6a16497-4da7-4cce-8fc7-29a5a5dc3e36
      alb.ingress.kubernetes.io/ssl-redirect: "443"
      alb.ingress.kubernetes.io/group.name: reciping
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: gp2-csi
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      searchNamespace: ALL
      folderAnnotation: grafana_folder
      provider:
        foldersFromFilesStructure: true

prometheus:
  prometheusSpec:
    retention: 15d
    podMonitorNamespaceSelector: {}
    podMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2-csi
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    externalLabels:
      cluster: reciping-eks
      environment: prod

kube-state-metrics:
  metricLabelsAllowlist:
    - pods=["reciping.io/team","app","app.kubernetes.io/name"]

# Enable Pushgateway for mock metrics injection
prometheus-pushgateway:
  enabled: true
  serviceMonitor:
    enabled: true
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

alertmanager:
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2-csi
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
  config:
    route:
      group_by: ['reciping_team','alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: default
      routes:
        - matchers: ['reciping_team="ads"']
          receiver: ads-slack
        - matchers: ['reciping_team="user"']
          receiver: user-slack
    receivers:
      - name: default
      - name: ads-slack
        slack_configs:
          - channel: '#ads-alerts'
            send_resolved: true
            api_url: https://hooks.slack.com/services/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
            title: '{{ if eq .Status "firing" }}[🚨알림🚨] {{ .CommonLabels.alertname }} 발생{{ else }}[👍복구👍] {{ .CommonLabels.alertname }}{{ end }}'
            text: |
              ☑️팀={{ .CommonLabels.reciping_team }} 
              ☑️서비스={{ .CommonLabels.reciping_service }}
              ☑️심각도={{ .CommonLabels.severity }} 
              ☑️상태={{ .Status }}

              {{ range .Alerts }}- {{ .Annotations.summary }}
                {{ .Annotations.description }}
              {{ end }}
      - name: user-slack
        slack_configs:
          - channel: '#user-alerts'
            send_resolved: true
            api_url: https://hooks.slack.com/services/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
            title: '{{ if eq .Status "firing" }}[🚨알림🚨] {{ .CommonLabels.alertname }} 발생{{ else }}[👍복구👍] {{ .CommonLabels.alertname }}{{ end }}'
            text: |
              ☑️팀={{ .CommonLabels.reciping_team }} 
              ☑️서비스={{ .CommonLabels.reciping_service }}
              ☑️심각도={{ .CommonLabels.severity }} 
              ☑️상태={{ .Status }}
              
              {{ range .Alerts }}- {{ .Annotations.summary }}
                {{ .Annotations.description }}
              {{ end }}
